# Explanation of Project Structure and File Interactions

This document provides a comprehensive overview of the codebase, describing the responsibilities, inputs, outputs, and interactions of all major files and modules in the project. The goal is to help new developers, reviewers, or users understand how the system works as a whole.

## 1. High-Level Workflow

The project is designed for scenario-based optimization and analysis of power systems. The workflow is as follows:

1. **main.py** is the entry point. It selects the question/scenario, loads scenario files, and orchestrates the simulation and result printing.
2. **Runner** (in `src/runner/runner.py`) manages the end-to-end process: data loading, model instantiation, running simulations, and collecting results.
3. **DataLoader** (in `src/data_ops/data_loader.py`) loads all required input data (JSON/CSV) for a given scenario/question.
4. **EnergySystemModel** (in `src/opt_model/opt_model.py`) builds and solves the optimization problem using Gurobi, based on the loaded data and scenario parameters.
5. **DataVisualizer** (in `src/data_ops/data_visualizer.py`) provides plotting and scenario comparison utilities.
6. **utils.py** (in `src/utils/utils.py`) provides utility functions for printing, file management, and data loading.

## 2. File-by-File Responsibilities

### main.py
- **Role:** Entry point for running simulations.
- **Inputs:**
  - User-selected question (e.g., 'question_1b')
  - Scenario selection (via `get_all_scenarios` and `select_scenarios`)
- **Outputs:**
  - Calls `Runner` to execute all selected scenarios
  - Prints scenario results using `print_all_scenarios`
- **Interactions:**
  - Imports and uses `Runner`, `utils` functions

### src/runner/runner.py
- **Role:** Orchestrates the simulation workflow for one or more scenarios.
- **Key Methods:**
  - `run_all_simulations`: Loops over scenarios, runs each, collects results, and triggers visualization.
  - `run_single_simulation`: Loads data, instantiates model components, runs optimization, and returns results.
- **Inputs:**
  - Scenario file paths (JSON)
  - Question name, input data path
- **Outputs:**
  - Results and profit for each scenario (dict)
  - Triggers plotting via `DataVisualizer`
- **Interactions:**
  - Uses `DataLoader` to load scenario data
  - Instantiates `Consumer`, `DER`, `Grid`, and `EnergySystemModel`
  - Passes scenario-specific parameters (e.g., discomfort cost) to the model

### src/data_ops/data_loader.py
- **Role:** Loads all input data for a scenario/question from the `data/` directory.
- **Inputs:**
  - Question name (e.g., 'question_1b')
  - Input path (e.g., 'data/question_1b/')
- **Outputs:**
  - Sets attributes for each loaded dataset (e.g., `DER_production`, `bus_params`, `appliance_params`, `usage_preference`)
- **Interactions:**
  - Used by `Runner` to provide data to model components
  - Uses `utils.load_dataset` for file reading

### src/opt_model/opt_model.py
- **Role:** Contains all optimization logic and model classes.
- **Key Classes:**
  - `Consumer`: Encapsulates load preferences, reference profiles, and flexibility
  - `DER`: Handles distributed energy resource profiles
  - `Grid`: Manages tariffs, prices, and grid limits
  - `EnergySystemModel`: Builds and solves the optimization problem
- **Inputs:**
  - Data objects from `DataLoader` (consumer, DER, grid)
  - Scenario parameters (e.g., discomfort cost, weighting factor `a`)
- **Outputs:**
  - Results dictionary (power flows, curtailment, cost, discomfort, etc.)
  - Total profit (objective value)
- **Interactions:**
  - Used by `Runner` to run the optimization for each scenario
  - Returns results for visualization and printing

### src/data_ops/data_visualizer.py
- **Role:** Visualization and scenario comparison.
- **Key Methods:**
  - `add_scenario`: Stores results for later plotting
  - `plot_scenario`: Plots results for a single scenario
  - `plot_comparison`: Plots results across multiple scenarios, including reference profiles if available
- **Inputs:**
  - Results dictionaries from `EnergySystemModel`
- **Outputs:**
  - Plots (saved to `img/<question>/` or shown interactively)
- **Interactions:**
  - Used by `Runner` after all scenarios are run

### src/utils/utils.py
- **Role:** Utility functions for printing, file management, and data loading.
- **Key Functions:**
  - `print_results`, `print_results_small`, `print_all_scenarios`: For formatted output
  - `get_unique_filename`: For safe file saving
  - `load_dataset`: Loads all files for a question from the data directory
  - `get_all_scenarios`, `select_scenarios`: Scenario management
- **Inputs/Outputs:**
  - Used throughout the codebase for common tasks

## 3. Data Flow and Interactions

- **Scenario Selection:**
  - `main.py` selects scenarios and passes them to `Runner`.
- **Data Loading:**
  - `Runner` uses `DataLoader` to load all required data for each scenario.
- **Model Construction:**
  - `Runner` instantiates `Consumer`, `DER`, and `Grid` using loaded data and scenario parameters.
- **Optimization:**
  - `EnergySystemModel` builds and solves the optimization problem, returning results and profit.
- **Result Handling:**
  - Results are collected by `Runner`, printed using `utils`, and visualized using `DataVisualizer`.

## 4. Inputs and Outputs

- **Inputs:**
  - Data files in `data/<question>/` (JSON/CSV)
  - Scenario configuration files (JSON)
  - User selection of question and scenarios
- **Outputs:**
  - Optimization results (power flows, costs, discomfort, etc.)
  - Plots (in `img/<question>/`)
  - Printed summaries in the console

## 5. Extensibility and Customization

- New scenarios can be added by placing new JSON files in the appropriate `data/<question>/` folder.
- New objectives or constraints can be added by extending `EnergySystemModel`.
- Additional visualizations can be implemented in `DataVisualizer`.
- Utility functions can be expanded in `utils.py` as needed.

---

This structure ensures modularity, clarity, and ease of extension for scenario-based power system optimization and analysis.
